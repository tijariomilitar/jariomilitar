<html>
	<head>
        <% include ./partials/head %>
	</head>
	<body>
		<div class="container">
			<div class="mobile-box a6">
				<img class="pointer width-150 noSelect" onclick="window.location.href='/'" src="/images/favicon/favicon-black.png">
			</div>
			<!-- <div class="mobile-box right padding-10 margin-top-10">
				<a href="/login" class="underline box-hover em09 padding-10 avant-garde">Entrar</a>
				<a href="/signup" class="underline box-hover em09 padding-10 avant-garde">Cadastrar</a>
			</div> -->
		</div>
		<section>
			<div id="canvas" class="box b1 width-150 height-150"></div>
		</section>
	</body>
	<footer>
		<% include ./partials/footer %>
    <!-- <script src="/javascripts/essentials/three.js"></script> -->
    <script type="module">
		  import * as THREE from 'https://cdn.skypack.dev/pin/three@v0.132.2-1edwuDlviJO0abBvWgKd/mode=imports,min/optimized/three.js';

			// document.addEventListener('DOMContentLoaded', function(event) {
    
			// });

			var canvas = document.getElementById('canvas');
			var canvasClientRect = canvas.getBoundingClientRect();

			var offsetX = canvasClientRect.left;
			var offsetY = canvasClientRect.top;

			let render, camera, scene;

			var startX = 100;
			var startY = 100;

			let md = false;

			function animateScene() {
			    requestAnimationFrame(animateScene);

			    cube.rotation.y += 0.02;
			    cube.rotation.x += 0.01;

			    renderScene();
			}

			function createCube(color) {
			    let cubeMaterials = new THREE.Material();

			    let cubeMaterial = new THREE.MeshBasicMaterial(cubeMaterials);
			    let cubeGeometry = new THREE.BoxGeometry(2, 2, 2);

			    let cube = new THREE.Mesh(cubeGeometry, cubeMaterial);

			    return cube;
			}

			function startScene(cube) {
			    render = new THREE.WebGLRenderer();

			    render.setClearColor(0x000000, 1);

			    let canvasWidth = canvas.getAttribute('width');
			    let canvasHeight = canvas.getAttribute('height');
			    render.setSize(canvasWidth, canvasHeight);

			    canvas.appendChild(render.domElement);

			    scene = new THREE.Scene();
			    let aspect = canvasWidth / canvasHeight;

			    camera = new THREE.PerspectiveCamera(20, aspect);
			    camera.position.set(0, 0, 25);
			    camera.lookAt(scene.position);
			    scene.add(camera);

			    cube.position.set(0, 0, 0);
			    scene.add(cube);
			}

			function renderScene() {
			    render.render(scene, camera);
			}

			let cube = createCube();
			startScene(cube);
			renderScene();
			// animateScene()

			document.addEventListener("keydown", e => {
			    e.preventDefault();
			    e.stopPropagation();

			    if(e.keyCode == 87){
			        camera.position.z -= 0.5;
			    };

			    if(e.keyCode == 83){
			        camera.position.z += 0.5;
			    };

			    if(e.keyCode == 65){
			        camera.position.x -= 0.1;
			    };

			    if(e.keyCode == 68){
			        camera.position.x += 0.1;
			    };

			    if(e.keyCode == 37){
			        camera.rotation.y += 0.01;
			    };

			    if(e.keyCode == 38){
			        camera.rotation.x += 0.01;
			    };

			    if(e.keyCode == 39){
			        camera.rotation.y -= 0.01;
			    };

			    if(e.keyCode == 40){
			        camera.rotation.x -= 0.01;
			    };

			    renderScene();
			});

			const controller = {
			    mouse: {
			        down: (e) => {
			            e.preventDefault();
			            e.stopPropagation();
			            md = true;

			            let mx=parseInt(e.clientX-offsetX);
			            let my=parseInt(e.clientY-offsetY);

			            startX = mx;
			            startY = my;
			        },
			        move: (e) => {
			            if(md){
			                let mx = parseInt(e.clientX-offsetX);
			                let my = parseInt(e.clientY-offsetY);

			                let dx = mx-startX;
			                let dy = my-startY;

			                camera.rotation.x += (dy / 500);
			                camera.rotation.y += (dx / 500);

			                renderScene();

			                startX = mx;
			                startY = my;
			            };
			        },
			        up: (e) => {
			            e.preventDefault();
			            e.stopPropagation();
			            md = false;
			        },
			        out: (e) => {
			            e.preventDefault();
			            e.stopPropagation();
			            md = false;
			        }
			    },
			    touch: {
			        down: (e) => {
			            e.preventDefault();
			            e.stopPropagation();
			            md = true;

			            let mx = parseInt(e.targetTouches[0].clientX-offsetX);
			            let my = parseInt(e.targetTouches[0].clientY-offsetY);

			            startX = mx;
			            startY = my;
			        },
			        move: (e) => {
			            if(md){
			                let mx=parseInt(e.targetTouches[0].clientX-offsetX);
			                let my=parseInt(e.targetTouches[0].clientY-offsetY);

			                let dx = mx-startX;
			                let dy = my-startY;

			                cube.rotation.x += (dy / 150);
			                cube.rotation.y += (dx / 150);

			                renderScene();
			                
			                startX = mx;
			                startY = my;
			            }
			        },
			        up: (e) => {
			            md = false;
			        },
			        out: (e) => {
			            md = false;
			        }
			    }
			};

			canvas.onmousedown = controller.mouse.down;
			canvas.onmousemove = controller.mouse.move;
			canvas.onmouseup = controller.mouse.up;
			canvas.onmouseout = controller.mouse.out;

			canvas.ontouchstart = controller.touch.down;
			canvas.ontouchmove = controller.touch.move;
			canvas.ontouchend = controller.touch.up;
			canvas.ontouchcancel = controller.touch.out;
		</script>
	</footer>
</html>